Java (lecture notes)

no pointers
garbage collection
mutable state
object oriented

dynamically allocates array memory
int [] i = new int[5];

create instance of class A = object
    A a = new A();

    objects exist at runtime when we've created it 
    structure of object is defined by class

one public class per file 

public static main (string[] args) {}

Primitive types
    Byte, char, short, int, long, float, double, boolean
Reference types
    Values that point to places in memory 
    Assign a pointer = copy a poitner, not with actual data object like in C 
    Arrays are references 
        Heap allocated -> array stays there
        Fixed size once allocated 
        Can return array sfrom methods 

Classes, single inheritance (inherit from one parent)
    Object heirarchy with object @ root 

Interface = substitutes multiple inheritance  
    parent passes to child o() andn p() -> child must implement o() and p() which constrains its behavior 

Abstract = API but no implementation
Final = API and implementation -> kids can't fuck up key methods 


Protected void finalize() throws Throwable 

Clone()
    gives you copy of object that calls it 
    objects have different locations -> two dif objects 

new Thread()
    state isi NEW, not RUNNING, STOPPED, etc 
    START -> allocates OS resources 
    RUN -> executes code inside thread -> RUNNABLE (OS can run it if it wants to, but doesn't have to)
    TIMEDWAITING - sleep 
    BLOCKED - i/o 
    WAITING - result is waiting 
    TERMINATED - exited run method  



