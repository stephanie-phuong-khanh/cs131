I wrote my make_parser function in terms of my make_matcher function because
I found great similarity in the logic and program structure requred by the
two programs after I wrote make_matcher first. The crux of the make_matcher
function is the use of two mutually recursive functions. The first function
chooses a rule from a set of rules for a nonterminal expression, the second
function then tries to match each symbol in the rule to the frag. An simple
comparison is made in the terminal symbol case, but when we encounter a 
nonterminal symbol in the rule examined, this second function calls the first
again, passing in this symbol to examine its set of rules generated by the
grammar. The second argument to the call of choose_rhs (the first function)
in line 49 of hw2.ml is the match_rule (second function) function provided all
but the last argument. This enables the current function to perform a search
similar to depth first search, explanding the current nonterminal symbol.
Immediately upon finishing this depth-first exploration, we explore the rest
of the symbols in that rule, now expanding "horizontally". For my make_matcher
function, the only thing returned from each of these functions is the result
from the acceptor function, which in the accept_empty_function case is either
None or Some []. Beginning to write make_parser, I tried to construct the
parse tree saving more information between these two mutually recursive 
functions, but because of the essential recursive call in line 49 and the
fact that these functions return only the result of the acceptor function,
I could not modify the make_matcher function to create by itself the parse
tree.

Instead, I modified a line in the first recursive function, choose_rhs, so that
for each expansion of a nonterminal, all the symbols of its chosen rule (in the
successful reconstruction of the parse tree) are saved into a list. This is
essentially a flattened version of the desired parse tree. To reconstruct the
nested and full parse tree, I wrote another set of two mutually recursive
functions that would similarly construct the set of rules corresponding to a
nonterminal, for each nonterminal. This reconstruction can be executed in a
depth-first fashion, guaranteeing that the next set of symbols in the list of
rules will be the next building block. In this method, I am able to separate
the extraction of the desired rules from correct construction of the parse tree
from these rules.

Unfortunately, this involved much duplication, as the first helper function to
make_parser is almost identical to the helper function to make_matcher. I
tried to modify the original function to make it adaptable to both use cases,
but this is not feasible since the two versions are expected to return
different types which cannot be done in OCaml. The functionality and checking
done by make_matcher is the exact logic needed for make_parser, so it would
not be effective to rewrite a solution for the second purpose.

My solution fails to check for loops that can lead to infinite runs. For
example, if nonterminal Expr led to a rule with nonterminal Expr, my solution
would intinitely expand each of these two nonterminals indefinitely and never
reaching a terminal value that would indicate failure of the exploration or 
progress in matching the frag. These loops can be larger and even more
difficult to detect, perhaps having more and different nonterminals that
ultimately are explored in a path that leads back to the starting terminal
in the loop.